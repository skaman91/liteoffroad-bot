import TelegramBot from 'node-telegram-bot-api'
import mongoose, { Mongoose } from 'mongoose'
import { DB } from './auth/bot.mjs'
import { MongoClient } from 'mongodb'
import { commands } from './const.js'

const url = 'mongodb+srv://skaman93:kadha7-Qyrrit-hisfer@cluster0.qn6jtl9.mongodb.net/?'
const client = new MongoClient(url)
await client.connect()
console.log('Connected successfully to db')
const db = client.db('liteoffroad')
const collection = db.collection('points')
const userCollection = db.collection('users')

let step = 0
let point = ''
let username = ''
let coordinates = ''
let comment = ''
let rating = 0
let install = false

export default class BotLogic {
  constructor ({
    apiToken
  }) {
    this.apiToken = apiToken
    this.bot = null
  }

  async start () {
    if (!this.bot) {
      this.bot = new TelegramBot(this.apiToken, { polling: true })
      console.log('bot', this.bot)
      this.bot.setMyCommands(commands)
      this.bot.on('message', msg => this.onMessage(msg))
      this.bot.on('photo', msg => this.onFile(msg))
    }
  }

  async onMessage (msg) {
    try {
      if (msg.text) {
        console.log(msg)
        const chatId = msg.chat?.id
        const user = msg?.from.first_name
        if (/^(—Ç–æ—á–∫–∏|\/points)$/i.test(msg.text)) {
          const cursor = await collection.find({rating: 1})
          let i = 0
          const points = []

          for (let data = await cursor.next(); data !== null; data = await cursor.next()) {
            i++
            points.push(data)
          }
          await this.bot.sendMessage(chatId, `<b>–ü—Ä–∏–≤–µ—Ç ${user}!\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫:</b>`, { parse_mode: 'HTML' })

          // –¢–æ—á–∫–∏
          for (const point of points) {
            const name = point.point
            const rating = point.rating
            const comment = point.comment
            const coordinates = point.coordinates
            const first = coordinates.split(',')[0].trim()
            const second = coordinates.split(',')[1].trim()
            const photo = point.photo
            const install = point.install ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '–¢–æ—á–∫–∞ –≤–∑—è—Ç–∞ –∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
            const installed = point.installed
            const installedComment = install ? `–£—Å—Ç–∞–Ω–æ–≤–∏–ª @${installed}` : `–¢–æ—á–∫—É –≤–∑—è–ª @${installed} –∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª`
            const text = `<b>${name}</b>\n<code>${coordinates}</code>\n${comment}\n<a href="https://yandex.ru/maps/?ll=${second}%2C${first}&mode=search&sll=${first}%${second}&text=${first}%2C${second}&z=15">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</a>\n–ó–∞ –≤–∑—è—Ç–∏–µ —ç—Ç–æ–π —Ç–æ—á–∫–∏ –≤–∞–º –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω ${rating} –±–∞–ª–ª.\n${installedComment}\n--------------------------------------`
            await this.bot.sendPhoto(chatId, photo)
            await this.bot.sendMessage(chatId, text, { parse_mode: 'HTML', disable_web_page_preview: true })
          }

          // –û–±—â–∞—è –∫–∞—Ä—Ç–∞ –≤—Å–µ—Ö —Ç–æ—á–µ–∫
          await this.bot.sendMessage(chatId, `<a href="https://yandex.ru/maps/?ll=30.260584%2C60.190150&mode=usermaps&source=constructorLink&um=constructor%3A835749c06de950dec11aa07d7999866ffd93035133cdbd7b81c7baa0238778ed&z=11.09">–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É —Å–æ –≤—Å–µ–º–∏ —Ç–æ—á–∫–∞–º–∏</a>`, {
            parse_mode: 'HTML',
            disable_web_page_preview: true
          })

        }

        if (/–∫–∞—Ä—Ç–∞|\/map$/i.test(msg.text)) {
          await this.bot.sendMessage(chatId, `<a href="https://yandex.ru/maps/?ll=30.260584%2C60.190150&mode=usermaps&source=constructorLink&um=constructor%3A835749c06de950dec11aa07d7999866ffd93035133cdbd7b81c7baa0238778ed&z=11.09">–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É —Å–æ –≤—Å–µ–º–∏ —Ç–æ—á–∫–∞–º–∏</a>`, {
            parse_mode: 'HTML',
            disable_web_page_preview: true
          })
        }

        if (/((–≤–∑—è–ª|—É—Å—Ç–∞–Ω–æ–≤–∏–ª) —Ç–æ—á–∫—É)|(\/take|\/install_point)/i.test(msg.text)) {
          install = /—É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ç–æ—á–∫—É|\/install_point/i.test(msg.text)
          if (!install) {
            await this.bot.sendMessage(chatId, '–°—É–ø–µ—Ä, –¥–∞–≤–∞–π —Ç–æ–≥–¥–∞ –æ—Ñ–æ—Ä–º–∏–º –í–∑—è—Ç–∏–µ —Ç–æ—á–∫–∏. –Ø –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–æ—á–Ω–æ, –≤—Å–µ —Ç–∞–∫–∏ —ç—Ç–æ —Å—É–ø–µ—Ä –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–∞ üòÇ')
          } else {
            await this.bot.sendMessage(chatId, '–°—É–ø–µ—Ä, –¥–∞–≤–∞–π —Ç–æ–≥–¥–∞ –æ—Ñ–æ—Ä–º–∏–º –£—Å—Ç–∞–Ω–æ–≤–∫—É —Ç–æ—á–∫–∏. –Ø –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–æ—á–Ω–æ, –≤—Å–µ —Ç–∞–∫–∏ —ç—Ç–æ —Å—É–ø–µ—Ä –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–∞ üòÇ')
          }
          await this.bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä —Ç–æ—á–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä "—Ç–æ—á–∫–∞ 5" –∏–ª–∏ "–°–µ–≤–µ—Ä–Ω–∞—è —Ç–æ—á–∫–∞ 1" –∏–ª–∏ "–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ç–æ—á–∫–∞ 666"')
          step = 1
          return
        }

        if (step === 1 && !point && install) {
          const pointField = /—Ç–æ—á–∫–∞ [0-9]+/i.test(msg.text)
          if (pointField && !point) {
            point = msg.text
            await this.bot.sendMessage(chatId, '–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è —á—Ç–æ –±—ã –æ–Ω–∏ –±—ã–ª–∏ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–±–µ–∑ –∫–æ–≤—ã—á–µ–∫, –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã —Å –∑–∞–ø—è—Ç–æ–π –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ) "60.342349, 30.017123" ')
            step = 2
            return
          }
        } else if (step === 1 && !install) {
          point = msg.text
          await this.bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∑—è—Ç–∏—è —Ç–æ—á–∫–∏')
          console.log('point', point)
          step = 4
        }

        if (step === 2 && point && !coordinates) {
          const coordinatesField = /(\d+\.\d{4,}, \d+\.\d{4,})/i.test(msg.text)
          if (coordinatesField && !coordinates && install) {
            coordinates = msg.text
            step = 3
            await this.bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç–æ—á–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–ª–∏ —á—Ç–æ-—Ç–æ —Ç–∞–∫–æ–µ.')
            return
          } else if (!coordinatesField && !coordinates && install) {
            await this.bot.sendMessage(chatId, '–§–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ –≤–µ—Ä–Ω—ã–π, –Ω—É–∂–Ω–æ —á—Ç–æ –±—ã –æ–Ω–∏ –±—ã–ª–∏ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ "60.342349, 30.017123" (–±–µ–∑ –∫–æ–≤—ã—á–µ–∫, –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã —Å –∑–∞–ø—è—Ç–æ–π –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ). –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–∑—è—Ç–∏—è —Ç–æ—á–∫–∏, —Ç–æ –Ω–∞–ø–∏—à–∏ "–æ—Ç–º–µ–Ω–∏—Ç—å"')

            return
          }
        }

        if (point && coordinates && step === 3) {
          if (!comment) {
            comment = msg.text
            step = 4
            await this.bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—á–∫–∏')
          }
        }

        if (/^\/profile$/i.test(msg.text)) {
          const id = msg.from.id
          const profile = await userCollection.findOne({ id: id} )
          if (profile) {
            const username = msg.from.username
            const firstName = msg.from.first_name
            const rating = profile.rating
            const takePoints = profile.takePoints
            const installPoints = profile.installPoints
            const text = `Username: ${username}\n–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${firstName}\n–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: ${rating}\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ—á–µ–∫: ${installPoints}\n–í–∑—è—Ç–æ —Ç–æ—á–µ–∫: ${takePoints}`
            await this.bot.sendMessage(chatId, text, { parse_mode: 'HTML'})
          }
        }

        if (/^\/results$/i.test(msg.text)) {
          await this.bot.sendMessage(chatId, '–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')

        }
        if (/^\/start$/i.test(msg.text)) {
          const username = msg.from.username
          const firstName = msg.from.first_name
          const id = msg.from.id
          const rating = 0
          const takePoints = 0
          const installPoints = 0
          const profile = await userCollection.findOne({ id: id} )
          if (!profile) {
            await userCollection.insertOne({
              id: id,
              firstName: firstName,
              username: username,
              rating: rating,
              takePoints: takePoints,
              installPoints: installPoints,
            })
            await this.bot.sendMessage(chatId, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')
          }
        }
      }
    } catch (e) {
      console.log('Failed onMessage', e.message)
    }
  }

  async onFile (msg) {
    try {
      const file = msg.photo[0].file_id
      const chatId = msg.from.id
      if (step === 4 && file) {
        await this.bot.sendMessage(chatId, '–û—Ç–ª–∏—á–Ω–æ, —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –ó–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —ç—Ç–æ–π —Ç–æ—á–∫–∏, —Ç–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω –æ–¥–∏–Ω –±–∞–ª–ª))')
        rating = 1
        step = 5
      } else {
        return
      }

      const text = install
        ? `${point} –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!üî•\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: <code>${coordinates}</code>\n–£—Å—Ç–∞–Ω–æ–≤–∏–ª: @${msg.from.username}\n${comment}\n–¢–µ–±–µ –¥–æ–±–∞–≤–ª–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥ +${rating}\n–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ 100500`
        : `${point} –í–∑—è—Ç–∞ üî•\n${comment}\n–¢–æ—á–∫—É –≤–∑—è–ª: @${msg.from.username}\n–¢–µ–±–µ –¥–æ–±–∞–≤–ª–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥ +${rating}\n–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ 100500`
      await this.bot.sendMessage(chatId, text, { parse_mode: 'HTML' })
      await this.bot.sendPhoto(chatId, file)
      const pointField = await collection.findOne({ point: point })
      if (pointField) {
        await collection.updateOne({point: point}, {$set: {
            coordinates: coordinates,
            comment: comment,
            install: install,
            installed: msg.from.username,
            photo: file,
          }})
        await userCollection.updateOne({username: msg.from.username},{$inc: {
            rating: rating,
            installPoints: install ? 1 : 0,
            takePoints: !install ? 1 : 0
          }})
      } else {
        await this.bot.sendMessage(chatId, '–¢–∞–∫–∞—è —Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      }


      step = 0
      point = ''
      username = ''
      coordinates = ''
      comment = ''
      rating = 0
    } catch (e) {
      console.log('Failed onFile', e.message)
    }
  }

  delay (minDelay, maxDelay) {
    const timeout = maxDelay ? ~~((minDelay + (maxDelay - minDelay) * Math.random())) : minDelay

    return new Promise(resolve => setTimeout(resolve, timeout))
  }

  stop () {
    if (this.bot) {
      this.bot.stop()
    }
  }
}