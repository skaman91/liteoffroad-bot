import TelegramBot from 'node-telegram-bot-api'
import 'dotenv/config'
import { CITIES } from './auth/bot.mjs'
import { MongoClient } from 'mongodb'
import { commands, rules1, rules2, adminCommands } from './const.js'
import cron from 'node-cron'
import * as turf from '@turf/turf'
// import { gameZones } from './zones.js'

const MONGO_URL = process.env.MONGO_URL
const client = new MongoClient(MONGO_URL)
await client.connect()
console.log('Connected successfully to db')
const db = client.db('liteoffroad')
const collection = db.collection('points')
const historyCollection = db.collection('historyPoints')
const userCollection = db.collection('users')
const stateCollection = db.collection('state')
const ADMIN = process.env.ADMIN
const CHANEL_LITEOFFROAD = process.env.CHANEL_LITEOFFROAD
const TESTCHANEL_ID_LITEOFFROAD = process.env.TESTCHANEL_ID_LITEOFFROAD
let eventStarting = false
// let eventStage = ''
// await this.loadBotState()

const usersMap = {}

export default class BotLogic {
  constructor ({
    apiToken
  }) {
    this.apiToken = apiToken
    this.bot = null
    this.init()
  }

  async init () {
    await this.loadBotState()
  }

  async loadBotState () {
    const state = await stateCollection.findOne({ key: 'eventStarting' })
    // const stage = await stateCollection.findOne({ key: 'eventStage' })

    if (state) {
      eventStarting = state.value
      // eventStage = state.value
      console.log(`Loaded eventStarting: ${eventStarting}`)
    } else {
      // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å eventStarting: false
      await stateCollection.insertOne({ key: 'eventStarting', value: false })
      eventStarting = false
      console.log('State not found, initialized with eventStarting: false')
    }
  }

  async start () {
    if (!this.bot) {
      this.bot = new TelegramBot(this.apiToken, { polling: true })
      console.log('bot started')
      await this.bot.setMyCommands(commands)
      this.bot.on('message', msg => this.onMessage(msg))
      this.bot.on('channel_post', msg => this.onChannelPost(msg))
      this.bot.on('photo', msg => this.onFile(msg))
      this.bot.on('callback_query', msg => this.onCallback(msg))

      cron.schedule('0 */3 * * *', () => {
        this.updatePointsRating().then(() => console.log(``))
      })
      cron.schedule('* * * * *', () => {
        this.checkInstallPoints()
      })
    }
  }

  async onChannelPost (msg) {
    console.log('msg', msg)
  }

  async onMessage (msg) {
    try {
      if (msg.text) {
        console.log(this.getTime())
        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ:', msg.text, 'userName:', msg?.from.username ? `@${msg?.from.username}` : '', 'first_name:', msg?.from.first_name)
        const profile = await userCollection.findOne({ id: msg.from.id })
        const chatId = msg.chat?.id
        const user = msg?.from.first_name
        const userName = msg?.from.username ? `@${msg?.from.username}` : ''
        const userId = msg?.from.id

        if (!profile && msg.text === '/start') {
          await this.registration(msg)
          return
        }

        if (profile && msg.text === '/start') {
          await this.bot.sendMessage(chatId, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')
          return
        }

        if (!usersMap[chatId]) {
          usersMap[chatId] = {
            username: userName,
            firstName: user,
            userId,
            step: 0,
            point: '',
            coordinates: '',
            comment: '',
            rating: 0,
            install: false,
            photo: '',
            waitingForResponse: false,
            city: profile?.city || '',
            textForChanel: '',
            textForChatId: '',
            takenPoints: profile?.takenPoints || [],
            noInstallPoints: profile.noInstallPoints
          }
        }

        usersMap[chatId].city = profile?.city || ''

        // console.log('usersMap[chatId]', usersMap[chatId])
        if (!profile && msg.text !== '/start') {
          await this.bot.sendMessage(chatId, `–í–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /start`)
          return
        }

        if (profile && profile.banned) {
          await this.bot.sendMessage(chatId, `–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º`)
          return
        }
        if (msg.text === '/points') {
          const cursor = await collection.find({ city: usersMap[chatId].city })
          let i = 0
          const points = []

          for (let data = await cursor.next(); data !== null; data = await cursor.next()) {
            i++
            points.push(data)
          }
          await this.bot.sendMessage(chatId, `<b>–ü—Ä–∏–≤–µ—Ç ${user}!\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫:</b>`, { parse_mode: 'HTML' })

          // –¢–æ—á–∫–∏
          for (const point of points) {
            const name = point.point
            if (name === '–¢–æ—á–∫–∞ 88' && !ADMIN.includes(userId)) {
              continue
            }
            const rating = point.rating
            const comment = point.comment

            if (comment === '—Ç–æ—á–∫—É —É–∫—Ä–∞–ª–∏') {
              continue
            }

            const coordinates = point.coordinates
            const first = coordinates?.split(',')[0]?.trim()
            const second = coordinates?.split(',')[1]?.trim()
            const photo = point?.photo
            const rang = point.rang === '–•–∞—Ä–¥' ? 'üî¥–•–∞—Ä–¥' : 'üü¢–õ–∞–π—Ç'
            const install = point.install
            const installed = point.installed
            const osmAndLink = `<a href="https://osmand.net/map?pin=${first},${second}#13/${first}/${second}">–û—Ç–∫—Ä—ã—Ç—å –≤ OsmAnd</a>`
            const ratingInfo = install ? `–ó–∞ –≤–∑—è—Ç–∏–µ —ç—Ç–æ–π —Ç–æ—á–∫–∏ –≤–∞–º –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω ${rating} ${this.declOfNum(rating, '–±–∞–ª–ª')}.` : `${installed} –ø–æ–ª—É—á–∏—Ç 2 –±–∞–ª–ª–∞, –∫–æ–≥–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç —ç—Ç—É —Ç–æ—á–∫—É`
            const installedComment = install ? `–£—Å—Ç–∞–Ω–æ–≤–∏–ª ${installed}` : `–¢–æ—á–∫—É –≤–∑—è–ª ${installed} –∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª`
            const takers = point.takers ? point?.takers?.join(', ') : []
            const installComment = install ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '–≤–∑—è—Ç–∞'
            const installedDays = `–¢–æ—á–∫–∞ ${installComment} ${this.getDaysSinceInstallation(point.takeTimestamp)} ${this.declOfNum(this.getDaysSinceInstallation(point.takeTimestamp), '–¥–Ω–µ–π')} –Ω–∞–∑–∞–¥`
            const text = !takers.length
              ? `<b>${rang || ''} ${name}</b>\n<code>${coordinates}</code>\n${comment}\n<a href="https://yandex.ru/maps/?ll=${second}%2C${first}&mode=search&sll=${first}%${second}&text=${first}%2C${second}&z=15">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</a>\n${ratingInfo}\n${installedComment}\n${installedDays}\n${osmAndLink}\n--------------------------------------`
              : `<b>${rang || ''} ${name}</b>\n<code>${coordinates}</code>\n${comment}\n<a href="https://yandex.ru/maps/?ll=${second}%2C${first}&mode=search&sll=${first}%${second}&text=${first}%2C${second}&z=15">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</a>\n${ratingInfo}\n${installedComment}\n–¢–æ—á–∫—É –±—Ä–∞–ª–∏, –Ω–æ –æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ –º–µ—Å—Ç–µ: ${takers}\n${installedDays}\n${osmAndLink}\n--------------------------------------`
            // await this.bot.sendLocation(chatId, first, second)
            if (photo) {
              await this.bot.sendPhoto(chatId, photo, {
                caption: text,
                parse_mode: 'HTML',
                disable_notification: true,
                disable_web_page_preview: true
              })
            } else {
              await this.bot.sendMessage(chatId, text, {
                parse_mode: 'HTML',
                disable_notification: true,
                disable_web_page_preview: true
              })
            }
          }

          // –û–±—â–∞—è –∫–∞—Ä—Ç–∞ –≤—Å–µ—Ö —Ç–æ—á–µ–∫
          await this.bot.sendMessage(chatId, `<a href="https://point-map.ru/">–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É —Å–æ –≤—Å–µ–º–∏ —Ç–æ—á–∫–∞–º–∏</a>`, {
            parse_mode: 'HTML',
            disable_web_page_preview: true
          })
        }

        if (msg.text === '/map') {
          await this.bot.sendMessage(chatId, `<a href="https://point-map.ru/">–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É —Å–æ –≤—Å–µ–º–∏ —Ç–æ—á–∫–∞–º–∏</a>`, {
            parse_mode: 'HTML',
            disable_web_page_preview: true
          })
        }

        if (/(\/take|\/install)/i.test(msg.text)) {
          await this.defaultData(chatId)
          const profile = await userCollection.findOne({ id: msg.from.id })
          if (!profile) {
            await this.bot.sendMessage(chatId, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ, –Ω–∞ –∂–º–∏—Ç–µ /start –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
            return
          }
          usersMap[chatId].install = /\/install/i.test(msg.text)
          if (!usersMap[chatId].install) {
            await this.bot.sendMessage(chatId, '–°—É–ø–µ—Ä, –¥–∞–≤–∞–π —Ç–æ–≥–¥–∞ –æ—Ñ–æ—Ä–º–∏–º –í–∑—è—Ç–∏–µ —Ç–æ—á–∫–∏. –Ø –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–æ—á–Ω–æ, –≤—Å–µ —Ç–∞–∫–∏ —ç—Ç–æ —Å—É–ø–µ—Ä –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–∞ üòé')
          } else {
            await this.bot.sendMessage(chatId, '–°—É–ø–µ—Ä, –¥–∞–≤–∞–π —Ç–æ–≥–¥–∞ –æ—Ñ–æ—Ä–º–∏–º –£—Å—Ç–∞–Ω–æ–≤–∫—É —Ç–æ—á–∫–∏. –Ø –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–æ—á–Ω–æ, –≤—Å–µ —Ç–∞–∫–∏ —ç—Ç–æ —Å—É–ø–µ—Ä –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–∞ üòé')
          }
          const results = await collection
            .find({
              city: usersMap[chatId].city,
              comment: { $ne: '—Ç–æ—á–∫—É —É–∫—Ä–∞–ª–∏' },
            })
            .limit(50)
            .toArray()
          if (results.length === 0) {
            return await this.bot.sendMessage(chatId, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞.')
          }

          const buttons = results
            .filter(point => point.point)
            .map(point => {
              const displayText = point.point.replace(/–¢–æ—á–∫–∞\s*/i, '').trim()
              let callbackData = `–¢–æ—á–∫–∞_${displayText.replace(/\s+/g, '_')}`

              return { text: displayText, callback_data: callbackData }
            })
          const inlineKeyboard = []
          for (let i = 0; i < buttons.length; i += 2) {
            inlineKeyboard.push(buttons.slice(i, i + 2))
          }

          await this.bot.sendMessage(chatId, '–ö–∞–∫–æ–π –Ω–æ–º–µ—Ä —Ç–æ—á–∫–∏?', {
            reply_markup: { inline_keyboard: inlineKeyboard }
          })
          usersMap[chatId].step = 1
          return
        }

        if (usersMap[chatId].step === 2 && usersMap[chatId].point && !usersMap[chatId].coordinates && usersMap[chatId].install) {
          const coordinates = this.parseCoordinates(msg.text)
          console.log('input coordinates', msg.text)
          console.log('formated coordinates', coordinates)
          // this.checkCoordinatesArea(coordinates)

          if (coordinates && !usersMap[chatId].coordinates && usersMap[chatId].install) {
            usersMap[chatId].coordinates = coordinates
            usersMap[chatId].step = 3
            await this.bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç–æ—á–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–ª–∏ —á—Ç–æ-—Ç–æ —Ç–∞–∫–æ–µ.')
            return
          } else if (!coordinates && !usersMap[chatId].coordinates && usersMap[chatId].install) {
            await this.bot.sendMessage(chatId, '–§–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –Ω—É–∂–Ω–æ —á—Ç–æ –±—ã –æ–Ω–∏ –±—ã–ª–∏ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ "60.342349, 30.017123" (–±–µ–∑ –∫–∞–≤—ã—á–µ–∫, –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã —Å –∑–∞–ø—è—Ç–æ–π –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ). –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–∑—è—Ç–∏—è —Ç–æ—á–∫–∏, —Ç–æ –Ω–∞–ø–∏—à–∏ "–æ—Ç–º–µ–Ω–∏—Ç—å"')

            return
          }
        }
        if (!usersMap[chatId].install && usersMap[chatId].step === 3) {
          if (!usersMap[chatId].comment) {
            usersMap[chatId].step = 4
            usersMap[chatId].comment = msg.text
            await this.bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å –û–î–ù–£!!! —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∑—è—Ç–∏—è —Ç–æ—á–∫–∏')
            return
          }
        }

        if ((usersMap[chatId].point && usersMap[chatId].coordinates && usersMap[chatId].step === 3) || usersMap[chatId].step === 3 && !usersMap[chatId].install) {
          if (!usersMap[chatId].comment) {
            usersMap[chatId].comment = msg.text
            usersMap[chatId].step = 4
            await this.bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å –û–î–ù–£!!! —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—á–∫–∏')
          }
        }

        if (/^\/profile$/i.test(msg.text)) {
          const id = msg.from.id
          const chatId = msg.from.id
          await this.defaultData(chatId)
          const profile = await userCollection.findOne({ id: id })
          if (profile) {
            const username = msg.from.username
            const firstName = msg.from.first_name
            const rating = profile.rating
            const position = profile.position
            const takePoints = profile.takePoints
            const installPoints = profile.installPoints
            const city = profile.city ? profile.city : '–ì–æ—Ä–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω'
            const text = `Username: ${username}\n–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${firstName}\n–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: ${rating}\n–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: ${position}\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ—á–µ–∫: ${installPoints}\n–í–∑—è—Ç–æ —Ç–æ—á–µ–∫: ${takePoints}\n–í–∞—à –≥–æ—Ä–æ–¥: ${city}`
            await this.bot.sendMessage(chatId, text, { parse_mode: 'HTML' })
          }
        }

        if (/^\/results$/i.test(msg.text)) {
          try {
            const chatId = msg.from.id
            await this.defaultData(chatId)
            const res = await this.ratingCursor()
            const resultUsers = res.result

            if (!resultUsers.length) {
              await this.bot.sendMessage(chatId, `–ï—â–µ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤, –∏–≥—Ä–∞ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–∞—Å—å`)
              return
            }

            let message = '<b>–û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã</b>'
            const maxLength = 4000 // –õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            let messages = [] // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å—Ç–µ–π

            for (let i = 0; i < resultUsers.length; i++) {
              const username = resultUsers[i].username
                ? `@${resultUsers[i].username}`
                : `<a href="tg://user?id=${resultUsers[i].id}">${resultUsers[i].firstName}</a>`

              const date = new Date(resultUsers[i].positionTime)
              const now = new Date()
              const diffInMs = now - date
              const daysDiff = Math.floor(diffInMs / (1000 * 60 * 60 * 24))
              const hoursDiff = Math.floor((diffInMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))
              const minutesDiff = Math.floor((diffInMs % (1000 * 60 * 60)) / (1000 * 60))

              const ratingText = daysDiff
                ? `–ù–∞ ${resultUsers[i].position} –º–µ—Å—Ç–µ —É–∂–µ ${daysDiff} ${this.declOfNum(daysDiff, '–¥–Ω–µ–π')}, ${hoursDiff} ${this.declOfNum(hoursDiff, '—á–∞—Å')} –∏ ${minutesDiff} ${this.declOfNum(minutesDiff, '–º–∏–Ω')}`
                : hoursDiff
                  ? `–ù–∞ ${resultUsers[i].position} –º–µ—Å—Ç–µ —É–∂–µ ${hoursDiff} ${this.declOfNum(hoursDiff, '—á–∞—Å')} –∏ ${minutesDiff} ${this.declOfNum(minutesDiff, '–º–∏–Ω')}`
                  : `–ù–∞ ${resultUsers[i].position} –º–µ—Å—Ç–µ —É–∂–µ ${minutesDiff} ${this.declOfNum(minutesDiff, '–º–∏–Ω')}`

              let entry = `\n--------------------------------------\n`
              entry += `<b>${resultUsers[i]?.position} –ú–µ—Å—Ç–æ</b> ${username} ${resultUsers[i]?.winner}\n`
              entry += `${resultUsers[i].rating} ${this.declOfNum(resultUsers[i].rating, '–±–∞–ª–ª')}\n`
              entry += `–í–∑—è—Ç–æ —Ç–æ—á–µ–∫: ${resultUsers[i].takePoints}\n`
              entry += `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ—á–µ–∫: ${resultUsers[i].installPoints}\n`
              entry += `${ratingText}`

              if ((message + entry).length > maxLength) {
                messages.push(message) // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é —á–∞—Å—Ç—å
                message = '' // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
              }

              message += entry
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
            if (message) {
              messages.push(message)
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            for (const msgPart of messages) {
              await this.bot.sendMessage(chatId, msgPart, {
                parse_mode: 'HTML',
                disable_notification: true
              })
            }

          } catch (e) {
            console.error('Failed results', e.message)
          }
        }

        if (/^\/eventresults|\/start eventresults$/i.test(msg.text)) {
          try {
            const chatId = msg.from.id
            await this.defaultData(chatId)
            if (!eventStarting) {
              await this.bot.sendMessage(chatId, `–≠—Ç–∞–ø —Å–µ–π—á–∞—Å –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è`)
              return
            }
            const res = await this.ratingCursor()
            const eventResult = res.eventResult

            if (!eventResult.length) {
              await this.bot.sendMessage(chatId, `–ï—â–µ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤, –∏–≥—Ä–∞ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–∞—Å—å`)
              return
            }

            let messages = []
            let message = '<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞</b>\n'

            for (let i = 0; i < eventResult.length; i++) {
              const username = eventResult[i].username
                ? `@${eventResult[i].username}`
                : `<a href="tg://user?id=${eventResult[i].id}">${eventResult[i].firstName}</a>`

              const date = new Date(eventResult[i].event.eventPositionTime)
              const now = new Date()
              const diffInMs = now - date
              const daysDiff = Math.floor(diffInMs / (1000 * 60 * 60 * 24))
              const hoursDiff = Math.floor((diffInMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))
              const minutesDiff = Math.floor((diffInMs % (1000 * 60 * 60)) / (1000 * 60))

              const ratingText = daysDiff
                ? `–ù–∞ ${eventResult[i].event.eventPosition} –º–µ—Å—Ç–µ —É–∂–µ ${daysDiff} ${this.declOfNum(daysDiff, '–¥–Ω–µ–π')}, ${hoursDiff} ${this.declOfNum(hoursDiff, '—á–∞—Å')} –∏ ${minutesDiff} ${this.declOfNum(minutesDiff, '–º–∏–Ω')}`
                : hoursDiff
                  ? `–ù–∞ ${eventResult[i].event.eventPosition} –º–µ—Å—Ç–µ —É–∂–µ ${hoursDiff} ${this.declOfNum(hoursDiff, '—á–∞—Å')} –∏ ${minutesDiff} ${this.declOfNum(minutesDiff, '–º–∏–Ω')}`
                  : `–ù–∞ ${eventResult[i].event.eventPosition} –º–µ—Å—Ç–µ —É–∂–µ ${minutesDiff} ${this.declOfNum(minutesDiff, '–º–∏–Ω')}`

              let entry = `-------------------------------------\n`
              entry += `<b>${eventResult[i].event.eventPosition} –ú–µ—Å—Ç–æ</b> ${username}\n`
              entry += `${eventResult[i].event.rating} ${this.declOfNum(eventResult[i].event.rating, '–±–∞–ª–ª')}\n`
              entry += `–í–∑—è—Ç–æ —Ç–æ—á–µ–∫: ${eventResult[i].event.eventTakePoints}\n`
              entry += `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ—á–µ–∫: ${eventResult[i].event.eventInstallPoints}\n`
              entry += `${ratingText}\n`

              if ((message.length + entry.length) > 4000) {
                messages.push(message)
                message = entry // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
              } else {
                message += entry
              }
            }

            messages.push(message) // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

            for (const msgPart of messages) {
              await this.bot.sendMessage(chatId, msgPart, {
                parse_mode: 'HTML',
                disable_notification: true
              })
            }
          } catch (e) {
            console.error('Failed results', e.message)
          }
        }

        if (/^\/archive$/i.test(msg.text)) {
          try {
            const chatId = msg.from.id
            await this.defaultData(chatId)
            const cursor = await historyCollection
              .find({ city: usersMap[chatId].city })
              .sort({ _id: -1 })
              .limit(20)
            let i = 0
            const points = []

            for (let data = await cursor.next(); data !== null; data = await cursor.next()) {
              i++
              points.push(data)
            }
            if (points.length) {
              await this.bot.sendMessage(chatId, `<b>–ü—Ä–∏–≤–µ—Ç ${user}!\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–æ—á–µ–∫:</b>`, { parse_mode: 'HTML' })
            } else {
              await this.bot.sendMessage(chatId, `<b>–ü—Ä–∏–≤–µ—Ç ${user}!\n–ù–µ –Ω–∞—à–ª–æ—Å—å –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–æ—á–µ–∫:</b>`, { parse_mode: 'HTML' })
            }
            await this.delay(2000)

            // –ê—Ä—Ö–∏–≤–Ω—ã–µ –¢–æ—á–∫–∏
            for (const archivePoint of points) {
              const name = archivePoint.point
              if (name === '–¢–æ—á–∫–∞ 88' && !ADMIN.includes(userId)) {
                continue
              }
              const rating = archivePoint.rating
              const comment = archivePoint.comment
              const coordinates = archivePoint.coordinates
              const first = coordinates?.split(',')[0].trim()
              const second = coordinates?.split(',')[1].trim()
              const photo = archivePoint?.photo
              const install = archivePoint.install
              const installed = archivePoint.installed
              const id = ADMIN.includes(userId) ? `                  id: ${archivePoint.id}` : ''
              const ratingInfo = `–ó–∞ –≤–∑—è—Ç–∏–µ —ç—Ç–æ–π —Ç–æ—á–∫–∏ –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${rating} ${this.declOfNum(rating, '–±–∞–ª–ª')}.`
              const installedComment = install ? `–£—Å—Ç–∞–Ω–æ–≤–∏–ª ${installed}` : `–¢–æ—á–∫—É –≤–∑—è–ª ${installed}`
              const date = new Date(archivePoint.takeTimestamp)
              const dateComment = install ? `–¢–æ—á–∫–∞ –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ${date.getFullYear()} - ${date.getMonth() + 1} - ${date.getDate()}` : `–¢–æ—á–∫–∞ –±—ã–ª–∞ –≤–∑—è—Ç–∞ ${date.getFullYear()} - ${date.getMonth() + 1} - ${date.getDate()}`
              const historyTakers = archivePoint.takers?.join(', ')
              const text = !historyTakers
                ? `<b>${name}</b>${id}\n<code>${coordinates}</code>\n${dateComment}\n${comment}\n<a href="https://yandex.ru/maps/?ll=${second}%2C${first}&mode=search&sll=${first}%${second}&text=${first}%2C${second}&z=15">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</a>\n${ratingInfo}\n${installedComment}\n--------------------------------------`
                : `<b>${name}</b>${id}\n<code>${coordinates}</code>\n${dateComment}\n${comment}\n<a href="https://yandex.ru/maps/?ll=${second}%2C${first}&mode=search&sll=${first}%${second}&text=${first}%2C${second}&z=15">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</a>\n${ratingInfo}\n${installedComment}\n–¢–æ—á–∫—É –±—Ä–∞–ª–∏, –Ω–æ –æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ –º–µ—Å—Ç–µ: ${historyTakers}\n--------------------------------------`
              // await this.bot.sendLocation(chatId, first, second)
              if (photo) {
                await this.bot.sendPhoto(chatId, photo, {
                  caption: text,
                  parse_mode: 'HTML',
                  disable_notification: true,
                  disable_web_page_preview: true
                })
              }
            }
          } catch (e) {
            console.log('Faled Archive', e)
          }
        }

        if (msg.text === '/rules') {
          const chatId = msg.from.id
          await this.defaultData(chatId)
          await this.bot.sendMessage(chatId, rules1, {
            parse_mode: 'HTML',
            disable_notification: true,
            disable_web_page_preview: true
          })
          await this.bot.sendMessage(chatId, rules2, {
            parse_mode: 'HTML',
            disable_notification: true,
            disable_web_page_preview: true
          })
        }

        // ADMIN
        if (/–∫–æ–º–∞–Ω–¥—ã/i.test(msg.text) && ADMIN.includes(userId)) {
          await this.bot.sendMessage(chatId, adminCommands, { parse_mode: 'HTML' })
        }

        if (/–≤–µ—Ä–Ω—É—Ç—å \d+/i.test(msg.text) && ADMIN.includes(userId)) {
          const backPoint = msg.text.split(' ')[1].trim()
          await this.bot.sendMessage(chatId, `–í–æ–∑–≤—Ä–∞—â–∞—é —Ç–æ—á–∫—É id: ${backPoint}`)
          const profile = await historyCollection.findOne({ id: parseInt(backPoint) })
          console.log('backPoint', backPoint)
          console.log('profile', profile)
          if (!profile) {
            await this.bot.sendMessage(chatId, '–¢–æ—á–∫–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
            return
          }
          await collection.updateOne({ point: profile.point }, {
            $set: {
              id: Math.floor(Math.random() * (999999 - 100000 + 1)) + 100000,
              install: !profile.install,
              coordinates: profile.coordinates,
              comment: profile.comment,
              photo: profile.photo,
              installed: profile.installed,
              installedId: profile.installedId,
              rating: profile.rating,
              city: profile.city,
              takeTimestamp: profile.takeTimestamp,
              updateTimestamp: profile.updateTimestamp
            }
          })
          // todo –°–¥–µ–ª–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ü–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ
          await this.bot.sendMessage(chatId, '–ì–æ—Ç–æ–≤–æ')
        }

        if (/–ø—Ä–∞–≤–∫–∞/i.test(msg.text) && ADMIN.includes(userId)) {
          // –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫–æ–µ –Ω–∏–±—É–¥—å –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–æ–º
          const coord = msg.text.split('|')[1].trim()
          console.log('coord', coord)
          this.checkCoordinatesArea(coord)
        }

        if (/–æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —ç—Ç–∞–ø–∞|–∏–≥—Ä—ã/i.test(msg.text) && ADMIN.includes(userId)) {
          await this.refreshRating()
        }

        if (/–î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É/i.test(msg.text) && ADMIN.includes(userId)) { // –î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É 22 –õ–∞–π—Ç –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
          try {
            // –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫–æ–µ –Ω–∏–±—É–¥—å –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–æ–º
            const pointName = `–¢–æ—á–∫–∞ ${msg.text.split(' ')[2].trim()}`
            const rang = msg.text.split(' ')[3].trim()
            const city = msg.text.split(' ')[4].trim()
            const checkPoint = await collection.findOne({ point: pointName, city: city })
            if (!checkPoint) {
              await collection.insertOne({
                point: pointName,
                coordinates: ',',
                comment: '–ù–æ–≤–∞—è —Ç–æ—á–∫–∞, –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∞—Å—å',
                rating: 1,
                install: false,
                installed: '',
                photo: '',
                takers: [],
                id: Math.floor(Math.random() * (999999 - 100000 + 1)) + 100000,
                takeTimestamp: Date.now(),
                updateTimestamp: Date.now(),
                rang,
                installedId: null,
                city
              })
              await this.bot.sendMessage(chatId, `${pointName} –î–æ–±–∞–≤–ª–µ–Ω–∞. \n–≥–æ—Ä–æ–¥ ${city}`, { parse_mode: 'HTML' })
              return
            } else {
              await this.bot.sendMessage(chatId, `–≠—Ç–∞ —Ç–æ—á–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, { parse_mode: 'HTML' })
              console.log('checkPoint', checkPoint)
            }
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏', e.message)
          }
        }

        if (/–∑–∞–±–∞–Ω–∏—Ç—å /i.test(msg.text) && ADMIN.includes(userId)) {
          const banUser = msg.text.split(' ')[1].trim()
          await userCollection.updateOne({ username: banUser }, { $set: { 'banned': true } })
          await this.bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${banUser} –∑–∞–±–∞–Ω–µ–Ω`)
        }
        if (/—Ä–∞–∑–±–∞–Ω–∏—Ç—å /i.test(msg.text) && ADMIN.includes(userId)) {
          const banUser = msg.text.split(' ')[1].trim()
          await userCollection.updateOne({ username: banUser }, { $set: { 'banned': false } })
          await this.bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${banUser} —Ä–∞–∑–±–∞–Ω–µ–Ω`)
        }

        // ADMIN —Å—Ç–∞—Ä—Ç —ç—Ç–∞–ø–∞
        if (/\d+ —ç—Ç–∞–ø —Å—Ç–∞—Ä—Ç/i.test(msg.text) && ADMIN.includes(userId)) { // 2 —ç—Ç–∞–ø —Å—Ç–∞—Ä—Ç –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
          const eventNumber = msg.text.split(' ')[0].trim()
          console.log('eventNumber', eventNumber)
          const cityEvent = msg.text.split(' ')[3].trim()
          console.log('cityEvent', cityEvent)
          await userCollection.updateMany(
            { city: cityEvent },
            {
              $set: {
                event: {
                  eventInstallPoints: 0,
                  eventTakePoints: 0,
                  rating: 0,
                  eventPosition: 0,
                  eventPositionTime: new Date().getTime()
                }
              }
            }
          )
          await this.bot.sendMessage(CHANEL_LITEOFFROAD, `‚ùó‚ùó‚ùó–í–Ω–∏–º–∞–Ω–∏–µ! –°—Ç–∞—Ä—Ç—É–µ—Ç ${eventNumber} —ç—Ç–∞–ø –∏–≥—Ä—ã! –í—Å–µ–º —É–¥–∞—á–∏! –≠—Ç–∞–ø –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω 1 –∞–ø—Ä–µ–ª—è –≤ 00:00‚ùó‚ùó‚ùó`)
          eventStarting = true
          await this.setEventStarting(eventStarting)
          return
        }

        // ADMIN —Å—Ç–æ–ø —ç—Ç–∞–ø–∞
        if (/\d+ —ç—Ç–∞–ø —Å—Ç–æ–ø/i.test(msg.text) && ADMIN.includes(userId)) { // 2 —ç—Ç–∞–ø —Å—Ç–æ–ø –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
          const eventNumber = msg.text.split(' ')[0].trim()
          const cityEvent = msg.text.split(' ')[3].trim()
          await this.bot.sendMessage(CHANEL_LITEOFFROAD, `‚ùó‚ùó‚ùó–í–Ω–∏–º–∞–Ω–∏–µ! –û–∫–æ–Ω—á–µ–Ω ${eventNumber} —ç—Ç–∞–ø –∏–≥—Ä—ã!‚ùó‚ùó‚ùó`)
          eventStarting = false
          await this.setEventStarting(eventStarting)
          return
        }

        // help
        if (/\/help/i.test(msg.text)) {
          const chatId = msg.from.id
          await this.defaultData(chatId)
          const userId = usersMap[chatId].userId
          const username = usersMap[chatId].username ? `${usersMap[chatId].username}` : `<a href="tg://user?id=${userId}">${usersMap[chatId].firstName}</a>`
          await this.bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${username}! –ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å? –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª @liteoffroad –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–¥–µ –≤—ã –∑–∞—Å—Ç—Ä—è–ª–∏ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ï—Å–ª–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–µ–Ω–µ—Ç, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –±–µ–¥—Å—Ç–≤–∏—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É –≤ –∫–∞–Ω–∞–ª–µ.`, {
            reply_markup: {
              keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']],
              one_time_keyboard: true,
              resize_keyboard: true
            },
            parse_mode: 'HTML'
          })
          usersMap[chatId].waitingForResponse = true
          return
        }
        // help
        if (msg.text === '‚ùå –û—Ç–º–µ–Ω–∞' && usersMap[chatId].waitingForResponse) {
          await this.bot.sendMessage(chatId, '–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.', {
            reply_markup: { remove_keyboard: true }
          })
          usersMap[chatId].waitingForResponse = false
        }
        // help
        if (usersMap[chatId].waitingForResponse) {
          const userName = usersMap[chatId].username ? `${usersMap[chatId].username}` : `<a href="tg://user?id=${userId}">${usersMap[chatId].firstName}</a>`

          if (msg.text) {
            await this.bot.sendMessage(chatId, '–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ–±—â–∏–π –∫–∞–Ω–∞–ª @liteoffroad!', {
              reply_markup: { remove_keyboard: true }
            })
            const text = `üö®–í–ù–ò–ú–ê–ù–ò–ï –°–û–°!!!\n ${userName} —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å:\n\n${msg.text}`
            await this.bot.sendMessage(CHANEL_LITEOFFROAD, text, {
              parse_mode: 'HTML'
            })

          }

          usersMap[chatId].waitingForResponse = false
        }

        if (/\/changeCity/i.test(msg.text)) {
          const chatId = msg.from.id
          await this.defaultData(chatId)
          const userCity = await this.getUserCity(chatId)
          console.log('user', user)
          console.log('–í–∞—à –≥–æ—Ä–æ–¥ -', userCity)
          await this.bot.sendMessage(chatId, `üèô –í–∞—à —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: \n*${userCity}*\n\n–•–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥?`, {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: '–î–∞, —Å–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥', callback_data: 'change_city' }],
                [{ text: '–ù–µ—Ç', callback_data: 'cancel' }]
              ]
            }
          })
        }
      }
    } catch (e) {
      console.log('Failed onMessage', e.message)
    }
  }

  parseCoordinates (input) {
    input = input.trim().replace(/[^\d.,¬∞‚Ä≤‚Ä≥ NSEW+\-]/g, '') // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã

    // –ï—Å–ª–∏ —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    let decimalMatch = input.match(/^([+\-]?\d{1,3}\.\d+),?\s*([+\-]?\d{1,3}\.\d+)$/)
    if (decimalMatch) {
      return `${parseFloat(decimalMatch[1]).toFixed(6)}, ${parseFloat(decimalMatch[2]).toFixed(6)}`
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å –≥—Ä–∞–¥—É—Å–∞–º–∏, –º–∏–Ω—É—Ç–∞–º–∏ –∏ —Å–µ–∫—É–Ω–¥–∞–º–∏
    let dmsMatch = input.match(/(\d{1,3})¬∞(\d{1,2})‚Ä≤(\d{1,2}(?:\.\d+)?)‚Ä≥?\s*([NSEW])/g)
    if (dmsMatch && dmsMatch.length === 2) {
      let coords = dmsMatch.map(dms => {
        let [, deg, min, sec, dir] = dms.match(/(\d{1,3})¬∞(\d{1,2})‚Ä≤(\d{1,2}(?:\.\d+)?)‚Ä≥?\s*([NSEW])/)
        let decimal = parseInt(deg) + parseInt(min) / 60 + parseFloat(sec) / 3600
        if (dir === 'S' || dir === 'W') decimal *= -1
        return decimal.toFixed(5)
      })
      return `${coords[0]}, ${coords[1]}`
    }

    return null
  }

  checkCoordinatesArea (input) {
    const polygonCoordinates = [
      [29.948576019403, 60.2476041405961],
      [29.9401646119323, 60.2351644124971],
      [29.9968128663268, 60.2187128636216],
      [30.0136356812682, 60.2419812869151],
      [29.9724369507995, 60.2664251544495],
      [29.948576019403, 60.2476041405961]
    ]
    const first = input?.split(',')[0]?.trim()
    const second = input?.split(',')[1]?.trim()
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Turf.js
    const polygon = turf.polygon([polygonCoordinates])
    const userPoint = turf.point([second, first])
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –ª–µ–∂–∏—Ç –ª–∏ —Ç–æ—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    const isInside = turf.booleanPointInPolygon(userPoint, polygon)

    if (isInside) {
      console.log('–¢–æ—á–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–æ–Ω–µ –∏–≥—Ä—ã!')
    } else {
      console.log('–¢–æ—á–∫–∞ –Ω–µ –≤ –∑–æ–Ω–µ –∏–≥—Ä—ã!')
    }
  }

  async registration (msg) {
    try {
      if (/^\/start$/i.test(msg.text)) {
        const chatId = msg.from.id
        const text = `–ü—Ä–∏–≤–µ—Ç. –≠—Ç–æ –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã "–ó–∞—Å—Ç—Ä—è–Ω—å –¥—Ä—É–≥–∞" –æ—Ç –∫–æ–º–∞–Ω–¥—ã Liteoffroad\n–í —Ä–∞–∑–¥–µ–ª–∞—Ö –º–µ–Ω—é —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n–ü–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø–∏—Å–∞—Ç—å @skaman91\n–£–¥–∞—á–∏ üòâ`
        await this.bot.sendMessage(chatId, text, { parse_mode: 'HTML' })
        const username = msg.from.username
        const firstName = msg.from.first_name
        const id = msg.from.id
        const profile = await userCollection.findOne({ id: id })
        if (!profile) {
          await userCollection.insertOne({
            id: id,
            firstName: firstName,
            username: username,
            rating: 0,
            eventRating: 0,
            position: 0,
            positionTime: new Date().getTime(),
            takePoints: 0,
            installPoints: 0,
            banned: false,
            event: {
              eventTakePoints: 0,
              eventInstallPoints: 0,
              eventRating: 0,
              eventPosition: 0,
              eventPositionTime: new Date().getTime()
            },
            resultEvents: {},
            takenPoints: [],
            noInstallPoints: [],
            winner: ''
          })
          await this.bot.sendMessage(chatId, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')
          await this.bot.sendMessage(chatId, 'üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:', {
            reply_markup: {
              inline_keyboard: CITIES.map(city => [{ text: city, callback_data: `city_${city}` }])
            }
          })
          return
        }
      }
    } catch (e) {
      console.log('Failed registration', e.message)
    }
  }

  async getUserCity (userId) {
    const user = await userCollection.findOne({ id: userId })
    return user ? user.city : '–ù–µ —É–∫–∞–∑–∞–Ω'
  }

  async updateUserCity (userId, city) {
    console.log('updateUserCity', userId, city)
    await userCollection.updateOne({ id: userId }, {
      $set: {
        city: city,
      }
    })
  }

  async onCallback (msg) {
    try {
      const chatId = msg.from.id
      if (msg.data.startsWith('–¢–æ—á–∫–∞_')) {
        const pointName = msg.data.replace(/_/g, ' ').trim()
        await this.takePoint(msg, pointName)
        await this.bot.deleteMessage(chatId, msg.message.message_id)
        return
      }
      switch (msg.data) {
        case 'tookPoints': { // –∑–∞–±—Ä–∞–ª
          console.log('–ó–∞–±—Ä–∞–ª usersMap[chatId].textForChanel', usersMap[chatId].textForChanel)
          await this.bot.deleteMessage(msg.message.chat.id, msg.message.message_id)
          await collection.updateOne({ point: usersMap[chatId].point }, {
            $set: {
              id: Math.floor(Math.random() * (999999 - 100000 + 1)) + 100000,
              install: usersMap[chatId].install,
              coordinates: usersMap[chatId].install ? usersMap[chatId].coordinates : ',',
              comment: usersMap[chatId].comment,
              photo: usersMap[chatId].photo,
              installed: msg.from.username ? `@${msg.from.username}` : msg.from.first_name,
              installedId: msg.from.id,
              rating: 1,
              takeTimestamp: new Date().getTime(),
              updateTimestamp: new Date().getTime()
            }
          })
          await this.delay(500)
          // await this.bot.sendMessage(chatId, '–í—ã –∑–∞–±—Ä–∞–ª–∏ —Ç–æ—á–∫—É, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–µ –Ω–∞ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ, –Ω–µ –±–ª–∏–∂–µ 5–∫–º –æ—Ç –º–µ—Å—Ç–∞ –≤–∑—è—Ç–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 3—Ö –¥–Ω–µ–π, –∞ –ª—É—á—à–µ —Å—Ä–∞–∑—É))', { disable_notification: true })
          console.log('–¢–æ—á–∫—É –∑–∞–±—Ä–∞–ª–∏')
          usersMap[chatId].textForChatId += '\n‚ùó–í—ã –∑–∞–±—Ä–∞–ª–∏ —Ç–æ—á–∫—É, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–µ –Ω–∞ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ, –Ω–µ –±–ª–∏–∂–µ 5–∫–º –æ—Ç –º–µ—Å—Ç–∞ –≤–∑—è—Ç–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 3—Ö –¥–Ω–µ–π, –∞ –ª—É—á—à–µ —Å—Ä–∞–∑—É))‚ùó'
          usersMap[chatId].textForChanel += '\n‚ùó–¢–æ—á–∫—É –∑–∞–±—Ä–∞–ª–∏‚ùó'

          await this.bot.sendPhoto(chatId, usersMap[chatId].photo, {
            caption: usersMap[chatId].textForChatId,
            parse_mode: 'HTML',
            disable_notification: true,
            disable_web_page_preview: true
          })
          await this.bot.sendPhoto(CHANEL_LITEOFFROAD, usersMap[chatId].photo, {
            caption: usersMap[chatId].textForChanel,
            parse_mode: 'HTML',
            disable_notification: true,
            disable_web_page_preview: true
          })

          const now = Date.now() * 1000
          const newPoint = { point: usersMap[chatId].point, timestamp: now }

          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è—è —Ç–æ—á–∫—É –≤ –º–∞—Å—Å–∏–≤ noInstallPoints
          await userCollection.updateOne(
            { id: msg.from.id },
            { $push: { noInstallPoints: newPoint } }
          )

          await this.defaultData(chatId)
          break
        }
        case 'noTookPoints': { // –æ—Å—Ç–∞–≤–∏–ª
          console.log('–û—Å—Ç–∞–≤–∏–ª usersMap[chatId].textForChanel', usersMap[chatId].textForChanel)

          const isPoint = await collection.findOne({ point: usersMap[chatId].point })
          const user = msg.from.username ? `@${msg.from.username}` : msg.from.first_name
          const takers = isPoint.takers
          takers.push(user)
          await collection.updateOne({ point: usersMap[chatId].point }, {
            $inc: { rating: 1 },
            $set: { takers: takers }
          })
          usersMap[chatId].textForChatId += '\n‚ùó–í—ã –æ—Å—Ç–∞–≤–∏–ª–∏ —Ç–æ—á–∫—É –Ω–∞ –º–µ—Å—Ç–µ‚ùó'
          usersMap[chatId].textForChanel += '\n‚ùó‚ùó‚ùó–¢–æ—á–∫—É –æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ –º–µ—Å—Ç–µ, —Ä–µ–π—Ç–∏–Ω–≥ —Ç–æ—á–∫–∏ –ø–æ–≤—ã—à–µ–Ω –Ω–∞ 1‚ùó‚ùó‚ùó'

          await this.bot.deleteMessage(msg.message.chat.id, msg.message.message_id)
          await this.bot.sendPhoto(chatId, usersMap[chatId].photo, {
            caption: usersMap[chatId].textForChatId,
            parse_mode: 'HTML',
            disable_notification: true,
            disable_web_page_preview: true
          })
          await this.bot.sendPhoto(CHANEL_LITEOFFROAD, usersMap[chatId].photo, {
            caption: usersMap[chatId].textForChanel,
            parse_mode: 'HTML',
            disable_notification: true,
            disable_web_page_preview: true
          })

          // await this.bot.sendMessage(chatId, '–í—ã –æ—Å—Ç–∞–≤–∏–ª–∏ —Ç–æ—á–∫—É –Ω–∞ –º–µ—Å—Ç–µ', { disable_notification: true })
          console.log('–¢–æ—á–∫—É –æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ –º–µ—Å—Ç–µ')
          // await this.bot.sendMessage(CHANEL_LITEOFFROAD, '–¢–æ—á–∫—É –æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ –º–µ—Å—Ç–µ, —Ä–µ–π—Ç–∏–Ω–≥ —Ç–æ—á–∫–∏ –ø–æ–≤—ã—à–µ–Ω –Ω–∞ 1', { disable_notification: true })
          await this.defaultData(chatId)
          break
        }
        case 'cancel': {
          await this.bot.deleteMessage(msg.message.chat.id, msg.message.message_id).catch(() => {})
          await this.bot.sendMessage(chatId, 'üëå –•–æ—Ä–æ—à–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º.')
          break
        }
        case 'change_city': {
          await this.bot.deleteMessage(msg.message.chat.id, msg.message.message_id).catch(() => {})
          await this.bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:', {
            reply_markup: {
              inline_keyboard: CITIES.map(city => [{ text: city, callback_data: `city_${city}` }])
            }
          })
          break
        }
      }

      if (msg.data.startsWith('city_')) {
        const newCity = msg.data.replace('city_', '')

        await this.updateUserCity(msg.from.id, newCity)
        await this.bot.deleteMessage(msg.message.chat.id, msg.message.message_id).catch(() => {})
        await this.bot.sendMessage(chatId, `‚úÖ –í–∞—à –≥–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ *${newCity}*!`, { parse_mode: 'Markdown' })
      }
    } catch (e) {
      console.log('Failed onMessage', e.message)
    }
  }

  async takePoint (msg, pointText) {
    const chatId = msg.from.id
    if (usersMap[chatId].step === 1 && !usersMap[chatId].point && usersMap[chatId].install) {
      const pointField = /—Ç–æ—á–∫–∞ [0-9]+/i.test(pointText)
      if (pointField && !usersMap[chatId].point) {
        usersMap[chatId].point = pointText
        const pointInBase = await collection.findOne({ point: pointText })
        if (!pointInBase) {
          await this.bot.sendMessage(chatId, '–¢–∞–∫–æ–π —Ç–æ—á–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –æ–ø–µ—á–∞—Ç–∞–ª–∏—Å—å')
          return
        }
        if (usersMap[chatId].install && pointInBase.install) {
          await this.bot.sendMessage(chatId, '‚ùó–¢–æ—á–∫–∞ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –µ–µ —Å–ø–µ—Ä–≤–∞ –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å‚ùó')
          return
        }
        await this.bot.sendMessage(chatId, '–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –û–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–±–µ–∑ –∫–æ–≤—ã—á–µ–∫, –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã —Å –∑–∞–ø—è—Ç–æ–π –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ) "60.342349, 30.017123"')
        usersMap[chatId].step = 2
      }
    } else if (usersMap[chatId].step === 1 && !usersMap[chatId].install) {
      usersMap[chatId].point = pointText
      const pointInBase = await collection.findOne({ point: pointText })
      if (!pointInBase) {
        await this.bot.sendMessage(chatId, '‚ùó–¢–∞–∫–æ–π —Ç–æ—á–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –æ–ø–µ—á–∞—Ç–∞–ª–∏—Å—å‚ùó')
        return
      }
      if (!usersMap[chatId].install && !pointInBase.install) {
        await this.bot.sendMessage(chatId, '‚ùó–¢–æ—á–∫–∞ —É–∂–µ –≤–∑—è—Ç–∞, –µ–µ —Å–ø–µ—Ä–≤–∞ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å‚ùó')
        return
      }
      const username = msg.from.username ? `@${msg.from.username}` : msg.from.first_name

      if ((!usersMap[chatId].install && pointInBase.takers.includes(username)) || (!usersMap[chatId].install && pointInBase.installed === username)) {
        await this.bot.sendMessage(chatId, `‚ùó‚ùó‚ùó–í—ã —É–∂–µ –±—Ä–∞–ª–∏ —ç—Ç—É —Ç–æ—á–∫—É, –Ω–µ–ª—å–∑—è –±—Ä–∞—Ç—å —Ç–æ—á–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ. –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –≤–∑—è—Ç—å —ç—Ç—É —Ç–æ—á–∫—É, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –µ–µ –ø–µ—Ä–µ—Å—Ç–∞–≤–∏—Ç.‚ùó‚ùó‚ùó`)
        return
      }

      // –Ω–µ–ª—å–∑—è –∏–º–µ—Ç—å –Ω–∞ —Ä—É–∫–∞—Ö –±–æ–ª—å—à–µ 3 —Ç–æ—á–µ–∫
      if (usersMap[chatId].noInstallPoints) {
        if (usersMap[chatId].noInstallPoints.length === 2) {
          await this.bot.sendMessage(chatId, `‚ùó–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 2 —Ç–æ—á–∫–∏ –Ω–∞ —Ä—É–∫–∞—Ö, –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è —ç—Ç–æ–π —Ç–æ—á–∫–∏, –≤–∞–º –Ω—É–∂–Ω–æ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –∏–º–µ—é—â–∏–µ—Å—è —Ç–æ—á–∫–∏‚ùó`)
        }
        if (usersMap[chatId].noInstallPoints.length === 3) {
          await this.bot.sendMessage(chatId, `‚ùó–£ –≤–∞—Å 3 —Ç–æ—á–∫–∏ –Ω–∞ —Ä—É–∫–∞—Ö, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±—Ä–∞—Ç—å —Ç–æ—á–∫–∏, –ø–æ–∫–∞ –Ω–µ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç–µ –∏–º–µ—é—â–∏–µ—Å—è‚ùó`)
        }
      }

      // –∫–∞–∂–¥—É—é —Ç–æ—á–∫—É –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
      const now = Date.now()
      await userCollection.updateOne(
        { id: msg.from.id },
        {
          $pull: { takenPoints: { timestamp: { $lt: now - 24 * 60 * 60 * 1000 } } }  // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
        }
      )
      const user = await userCollection.findOne({ id: msg.from.id })
      const takenPoints = user ? user.takenPoints : []
      usersMap[chatId].takenPoints = takenPoints
      const pointEntry = takenPoints.find(p => p.point === pointText)
      if (pointEntry && (now - pointEntry.timestamp < 24 * 60 * 60 * 1000)) {
        const msLeft = 24 * 60 * 60 * 1000 - (now - pointEntry.timestamp)

        const hours = Math.floor(msLeft / (1000 * 60 * 60))
        const minutes = Math.floor((msLeft % (1000 * 60 * 60)) / (1000 * 60))

        const timeLeft = `${hours} —á ${minutes} –º–∏–Ω`

        await this.bot.sendMessage(chatId, `‚ùó–í—ã —É–∂–µ –±—Ä–∞–ª–∏ —ç—Ç—É —Ç–æ—á–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤. –í—ã —Å–º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –µ—ë —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ ${timeLeft}.‚ùó`)
        return
      }

      await this.bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ –≤–∑—è—Ç–∏–∏ —Ç–æ—á–∫–∏, –±—ã–ª–æ —Å–ª–æ–∂–Ω–æ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ. –ù—É —á—Ç–æ-—Ç–æ —Ç–∞–∫–æ–µ) –õ–∏–±–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –ø—Ä–æ—á–µ—Ä–∫ -')
      usersMap[chatId].step = 3
    }
  }

  async checkInstallPoints() {
    const now = Date.now()
    const THREE_DAYS_MS = 3 * 24 * 60 * 60 * 1000
    const TWENTY_FOUR_HOURS_MS = 24 * 60 * 60 * 1000
    // const TWENTY_FOUR_HOURS_MS = 5 * 60 * 1000

    const users = await userCollection.find({
      noInstallPoints: { $exists: true, $not: { $size: 0 } }
    }).toArray()

    for (const user of users) {
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
      const overduePoints = user.noInstallPoints.filter(p => {
        const ts = typeof p.timestamp === 'number' ? p.timestamp : Number(p.timestamp)
        return now - ts > THREE_DAYS_MS
      })

      if (overduePoints.length > 0) {
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π —Ç–æ—á–∫–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è
        let pointsToDeduct = []
        for (const point of overduePoints) {
          const lastDeduction = point.lastDeductionTimestamp || 0
          if (now - lastDeduction >= TWENTY_FOUR_HOURS_MS) {
            pointsToDeduct.push(point)
          }
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–∫–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ—à–ª–æ 24 —á–∞—Å–∞, —Å–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–ª—ã
        if (pointsToDeduct.length > 0) {
          const username = user.username
            ? `@${user.username}`
            : `<a href="tg://user?id=${user.id}">${user.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</a>`

          let text = `üîî –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏:\n`
          for (const point of pointsToDeduct) {
            const diff = now - point.timestamp
            const days = Math.floor(diff / (1000 * 60 * 60 * 24))
            const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))

            text += `<b>${point.point}</b> –±—ã–ª–∞ –≤–∑—è—Ç–∞ <b>${days} –¥–Ω ${hours} —á</b> –Ω–∞–∑–∞–¥.\n`
          }
          text += `–ó–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É —Å–ø–∏—Å–∞–Ω–æ ${pointsToDeduct.length} –±.\n`
          await this.bot.sendMessage(139280481, text, { parse_mode: 'HTML' })

          // –û–±–Ω–æ–≤–ª—è–µ–º timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏
          await userCollection.updateOne(
            { _id: user._id },
            {
              $set: {
                "noInstallPoints.$[elem].lastDeductionTimestamp": now
              },
            },
            {
              arrayFilters: [
                { "elem": { $in: pointsToDeduct } }
              ]
            }
          )
          // await userCollection.updateOne({ id: user.id }, {
          //   $inc: {
          //     rating: -1
          //   }
          // })
          // if (eventStarting) {
          //   await userCollection.updateOne({ id: user.id }, {
          //     $inc: {
          //       'event.rating': -1
          //     }
          //   })
          // }
        }
      }
    }
  }



  async ratingCursor () {
    const result = []
    const eventResult = []
    const cursor = await userCollection.find({ rating: { $gt: 0 } })
      .sort({
        position: 1,
        rating: -1,
        installPoints: -1,
        takePoints: -1
      })
    const eventCursor = await userCollection.find({ 'event.rating': { $gt: 0 } })
      .sort({
        'event.eventPosition': 1,
        'event.rating': -1,
        'event.installPoints': -1,
        'event.takePoints': -1
      })
    for (let data = await eventCursor.next(); data !== null; data = await eventCursor.next()) {
      eventResult.push(data)
    }
    for (let data = await cursor.next(); data !== null; data = await cursor.next()) {
      result.push(data)
    }
    return { result, eventResult }
  }

  async refreshRating () {
    try {
      if (eventStarting) {
        try {
          const res = await this.ratingCursor()
          const resultUsers = res.result

          if (!resultUsers.length) {
            return
          }

          const eventUsers = await userCollection.find({ 'event.rating': { $gt: 0 } }).sort({
            'event.rating': -1,
            'event.eventPosition': 1,
            'event.installPoints': -1,
            'event.takePoints': -1
          }).toArray()

          let message = ''
          let positionChanged = false
          let positionAlert = false

          for (let i = 0; i < eventUsers.length; i++) {
            const user = eventUsers[i]
            const newPosition = i + 1

            if (user.event.eventPosition !== newPosition) {
              positionChanged = true

              if (newPosition <= 10 || user.position <= 10) {
                positionChanged = true
                positionAlert = true

                const userMention = user.username
                  ? `@${user.username}`
                  : `<a href="tg://user?id=${user.id}">${user.firstName}</a>`

                message += `${userMention} —Ç–µ–ø–µ—Ä—å –Ω–∞ ${newPosition} –º–µ—Å—Ç–µ\n\n`
              }

              await userCollection.updateOne({ _id: user._id }, {
                $set: {
                  'event.eventPosition': newPosition,
                  'event.eventPositionTime': Date.now()
                }
              })
            }
          }

          if (positionChanged && positionAlert) {
            message += `<a href="https://t.me/liteoffroad_bot?start=eventresults">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —ç—Ç–∞–ø–∞</a>`
            await this.bot.sendMessage(CHANEL_LITEOFFROAD, `üèÜ –ü–æ–∑–∏—Ü–∏–∏ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ —ç—Ç–∞–ø–∞ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å\n\n${message}`, {
              parse_mode: 'HTML',
              disable_notification: true
            })
          }
        } catch (e) {
          console.error('Refresh event results', e.message)
        }
      }
      try {
        const res = await this.ratingCursor()
        const result = res.result
        if (!result.length) {
          return
        }
        const users = await userCollection.find({ rating: { $gt: 0 } }).sort({
          rating: -1,
          position: 1,
          installPoints: -1,
          takePoints: -1
        }).toArray()

        let message = ''
        let positionChanged = false
        let positionAlert = false

        for (let i = 0; i < users.length; i++) {
          const user = users[i]
          const newPosition = i + 1

          if (user.position !== newPosition) {
            positionChanged = true

            if (newPosition <= 10 || user.position <= 10) {
              positionChanged = true
              positionAlert = true

              const userMention = user.username
                ? `@${user.username}`
                : `<a href="tg://user?id=${user.id}">${user.firstName}</a>`

              message += `${userMention} —Ç–µ–ø–µ—Ä—å –Ω–∞ ${newPosition} –º–µ—Å—Ç–µ\n\n`
            }

            await userCollection.updateOne({ _id: user._id }, {
              $set: {
                position: newPosition,
                positionTime: Date.now()
              }
            })
          }
        }

        if (positionChanged && !eventStarting && positionAlert) {
          await this.bot.sendMessage(CHANEL_LITEOFFROAD, `üèÜ –ü–æ–∑–∏—Ü–∏–∏ –≤ –æ–±—â–µ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –∏–≥—Ä—ã –æ–±–Ω–æ–≤–∏–ª–∏—Å—å\n\n${message}`, {
            parse_mode: 'HTML',
            disable_notification: true
          })
        }
      } catch (e) {
        console.error('Refresh game results', e.message)
      }
    } catch (e) {
      console.error('Failed to refresh rating', e.message)
    }
  }

  async onFile (msg) {
    try {
      const chatId = msg.from.id
      usersMap[chatId].photo = msg.photo[0].file_id
      console.log(this.getTime())
      console.log('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ: ', usersMap[chatId].photo)
      const username = msg.from.username ? `@${msg.from.username}` : msg.from.first_name
      const pointField = await collection.findOne({ point: usersMap[chatId].point })
      if (usersMap[chatId].step === 4 && usersMap[chatId].photo) {
        const text = usersMap[chatId].install
          ? '–û—Ç–ª–∏—á–Ω–æ, —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –ó–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —ç—Ç–æ–π —Ç–æ—á–∫–∏, —Ç–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ 2 –±–∞–ª–ª–∞'
          : `–û—Ç–ª–∏—á–Ω–æ, —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –ó–∞ –≤–∑—è—Ç–∏–µ —ç—Ç–æ–π —Ç–æ—á–∫–∏, —Ç–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ: ${pointField.rating} ${this.declOfNum(pointField.rating, '–±–∞–ª–ª')}`
        await this.bot.sendMessage(chatId, text)
        usersMap[chatId].rating = pointField.rating
      } else {
        return
      }
      const profile = await userCollection.findOne({ id: msg.from.id })
      const textForChatId = usersMap[chatId].install
        ? `${usersMap[chatId].point} –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!üî•\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: <code>${usersMap[chatId].coordinates}</code>\n–£—Å—Ç–∞–Ω–æ–≤–∏–ª: ${username}\n${usersMap[chatId].comment}\n–¢–µ–±–µ –¥–æ–±–∞–≤–ª–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥ +2\n–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ ${profile.rating + 2}\n–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª @liteoffroad`
        : `${usersMap[chatId].point} –í–∑—è—Ç–∞ üî•\n\n${usersMap[chatId].comment}\n\n–¢–æ—á–∫—É –≤–∑—è–ª: ${username}\n–¢–µ–±–µ –¥–æ–±–∞–≤–ª–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥ +${usersMap[chatId].rating}\n–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ ${profile.rating + usersMap[chatId].rating}\n–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª @liteoffroad`

      const textForChanel = usersMap[chatId].install
        ? `${usersMap[chatId].point} –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!üî•\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: <code>${usersMap[chatId].coordinates}</code>\n–£—Å—Ç–∞–Ω–æ–≤–∏–ª: ${username}\n${usersMap[chatId].comment}\n–ï–º—É –¥–æ–±–∞–≤–ª–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥ +2\n<a href="https://point-map.ru/?id=${pointField.id}&type=install">üìç–ö–∞—Ä—Ç–∞ —Å —Ç–æ—á–∫–∞–º–∏üìç</a>`
        : `${usersMap[chatId].point} –í–∑—è—Ç–∞ üî•\n\n${usersMap[chatId].comment}\n\n–¢–æ—á–∫—É –≤–∑—è–ª: ${username}\n–ö–æ–æ—Ä–∏–Ω–∞—Ç—ã: <code>${pointField.coordinates}</code>\n–ï–º—É –¥–æ–±–∞–≤–ª–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥ +${usersMap[chatId].rating}\n<a href="https://point-map.ru/?id=${pointField.id}&type=take">üìç–ö–∞—Ä—Ç–∞ —Å —Ç–æ—á–∫–∞–º–∏üìç</a>`

      usersMap[chatId].textForChatId = textForChatId
      usersMap[chatId].textForChanel = textForChanel

      if (usersMap[chatId].install) {
        await this.bot.sendPhoto(chatId, usersMap[chatId].photo, {
          caption: textForChatId,
          parse_mode: 'HTML',
          disable_notification: true,
          disable_web_page_preview: true
        })
        await this.bot.sendPhoto(CHANEL_LITEOFFROAD, usersMap[chatId].photo, {
          caption: textForChanel,
          parse_mode: 'HTML',
          disable_notification: true,
          disable_web_page_preview: true
        })
      }

      if (pointField) {
        if (usersMap[chatId].install) {
          await historyCollection.insertOne({
            id: pointField.id || Math.floor(Math.random() * (999999 - 100000 + 1)) + 100000,
            point: pointField.point,
            comment: pointField.comment,
            coordinates: pointField.coordinates,
            install: true,
            installed: msg.from.username ? `@${msg.from.username}` : msg.from.first_name,
            installedId: msg.from.id,
            photo: pointField.photo,
            rating: pointField.rating,
            takers: pointField.takers,
            city: pointField.city,
            takeTimestamp: new Date().getTime(),
            updateTimestamp: new Date().getTime()
          })
        } else {
          await historyCollection.insertOne({
            id: pointField.id || Math.floor(Math.random() * (999999 - 100000 + 1)) + 100000,
            point: pointField.point,
            comment: usersMap[chatId].comment,
            coordinates: pointField.coordinates,
            install: false,
            installed: msg.from.username ? `@${msg.from.username}` : msg.from.first_name,
            installedId: msg.from.id,
            photo: pointField.photo,
            rating: pointField.rating,
            takers: pointField.takers,
            city: pointField.city,
            takeTimestamp: new Date().getTime(),
            updateTimestamp: new Date().getTime()
          })
        }

        if (msg.from.id) {
          await userCollection.updateOne({ id: msg.from.id }, {
            $inc: {
              rating: usersMap[chatId].install ? 2 : usersMap[chatId].rating,
              installPoints: usersMap[chatId].install ? 1 : 0,
              takePoints: !usersMap[chatId].install ? 1 : 0
            }
          })
          if (eventStarting) {
            await userCollection.updateOne({ id: msg.from.id }, {
              $inc: {
                'event.rating': usersMap[chatId].install ? 2 : usersMap[chatId].rating,
                'event.eventInstallPoints': usersMap[chatId].install ? 1 : 0,
                'event.eventTakePoints': !usersMap[chatId].install ? 1 : 0
              }
            })
          }

          if (eventStarting) {
            await this.refreshRating()
          } else {
            await this.refreshRating()
          }
        }

        if (usersMap[chatId].install) {
          await collection.updateOne({ point: usersMap[chatId].point }, {
            $set: {
              id: Math.floor(Math.random() * (999999 - 100000 + 1)) + 100000,
              install: usersMap[chatId].install,
              installed: msg.from.username ? `@${msg.from.username}` : msg.from.first_name,
              installedId: msg.from.id,
              coordinates: usersMap[chatId].install ? usersMap[chatId].coordinates : ',',
              comment: usersMap[chatId].comment,
              photo: usersMap[chatId].photo,
              rating: 1,
              takers: [],
              takeTimestamp: new Date().getTime(),
              updateTimestamp: new Date().getTime()
            }
          })
          await userCollection.updateOne(
            { id: msg.from.id },
            { $pull: { noInstallPoints: { point: usersMap[chatId].point } } }  // –£–¥–∞–ª—è–µ–º —Ç–æ—á–∫—É –∏–∑ –º–∞—Å—Å–∏–≤–∞ noInstallPoints
          )
        }
        if (!usersMap[chatId].install) {
          await this.bot.sendMessage(chatId, `–¢–æ—á–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å –Ω–∞ –º–µ—Å—Ç–µ –∏–ª–∏ –∑–∞–±—Ä–∞–ª?`, {
            reply_markup: {
              inline_keyboard: [
                [{ text: '–û—Å—Ç–∞–≤–∏–ª', callback_data: 'noTookPoints' }, { text: '–ó–∞–±—Ä–∞–ª', callback_data: 'tookPoints' }]
              ]
            }
          })
          const now = Date.now() * 1000
          await userCollection.updateOne(
            { id: msg.from.id },
            { $push: { takenPoints: { point: usersMap[chatId].point, timestamp: now } } }
          )
        } else {
          await this.defaultData(chatId)
        }
      } else {
        await this.bot.sendMessage(chatId, '–¢–∞–∫–∞—è —Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        await this.defaultData(chatId)
      }
    } catch (e) {
      console.log('Failed onFile', e.message)
    }
  }

  delay (minDelay, maxDelay) {
    const timeout = maxDelay ? ~~((minDelay + (maxDelay - minDelay) * Math.random())) : minDelay

    return new Promise(resolve => setTimeout(resolve, timeout))
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
  getTime () {
    const currentTime = new Date()
    currentTime.setHours(currentTime.getHours() + 3)

    const day = String(currentTime.getDate()).padStart(2, '0')
    const month = String(currentTime.getMonth() + 1).padStart(2, '0')
    const year = currentTime.getFullYear()
    const hours = String(currentTime.getHours()).padStart(2, '0')
    const minutes = String(currentTime.getMinutes()).padStart(2, '0')
    const seconds = String(currentTime.getSeconds()).padStart(2, '0')

    return `${day}.${month}.${year} - ${hours}:${minutes}:${seconds}`
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–µ—Ä–µ—Å—Ç–∞–≤–∏–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏
  async updatePointsRating () {
    try {
      const oneWeekAgo = new Date()
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7)
      const oneWeekAgoTimestamp = oneWeekAgo.getTime()

      const filter = {
        updateTimestamp: { $lte: oneWeekAgoTimestamp },
        install: true,
        rating: { $lte: 10 },
        comment: { $ne: '—Ç–æ—á–∫—É —É–∫—Ä–∞–ª–∏' },
        point: { $ne: '–¢–æ—á–∫–∞ 88' }
      }

      const pointsLastWeekAgo = await collection.find(filter).toArray()

      if (pointsLastWeekAgo.length === 0) {
        return
      }

      await collection.updateMany(
        filter,
        {
          $inc: { rating: 1 },
          $set: { updateTimestamp: new Date().getTime() },
        }
      )

      let message = 'üì£–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–æ—á–µ–∫:üì£\n\n'

      for (const point of pointsLastWeekAgo) {
        message += `${point.point}: –ù–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: ${point.rating + 1}\n`
        const user = await userCollection.findOne({ id: point.installedId })
        if (user) {
          if (!user.banned) {
            await userCollection.updateOne({ id: point.installedId },
              {
                $inc: { rating: 1 }
              }
            )
            message += `–¢–æ—á–∫—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª ${point.installed}, –µ–º—É –¥–æ–±–∞–≤–ª–µ–Ω 1 –±–∞–ª–ª\n\n`
          }
          if (eventStarting) {
            await userCollection.updateOne({ id: point.installedId },
              {
                $inc: { 'event.rating': 1 }
              }
            )
          }
        }
      }
      await this.bot.sendMessage(CHANEL_LITEOFFROAD, message)
      await this.refreshRating()
    } catch (e) {
      console.error(`[${new Date().toISOString()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:`, e.message)
    }
  }

  async setEventStarting (value) {
    eventStarting = value
    await stateCollection.updateOne(
      { key: 'eventStarting' },
      { $set: { value } },
      { upsert: true }
    )
  }

  // –∫–æ–ª-–≤–æ –¥–Ω–µ–π —Å –¥–∞—Ç—ã (timestamp)
  getDaysSinceInstallation (timestamp) {
    const currentDate = new Date()
    const installationDate = new Date(timestamp)

    // –†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–Ω—è—Ö, —Å—á–∏—Ç–∞—è —Å–º–µ–Ω—É –¥–∞—Ç—ã
    return Math.ceil((currentDate - installationDate) / (1000 * 60 * 60 * 24))
  }

  declOfNum (number, label) {
    const labels = {
      '–±–∞–ª–ª': ['–±–∞–ª–ª', '–±–∞–ª–ª–∞', '–±–∞–ª–ª–æ–≤'],
      '—á–∞—Å': ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'],
      '–º–∏–Ω': ['–º–∏–Ω—É—Ç—É', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'],
      '–¥–Ω–µ–π': ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π']
    }

    const map = labels[label]

    if (!map) {
      return label
    }

    const cases = [2, 0, 1, 1, 1, 2]

    return map[(number % 100 > 4 && number % 100 < 20) ? 2 : cases[(number % 10 < 5) ? number % 10 : 5]]
  }

  async defaultData (chatId) {
    const profile = await userCollection.findOne({ id: chatId })

    usersMap[chatId] = {
      username: usersMap[chatId].username || '',
      firstName: usersMap[chatId].firstName || '',
      userId: usersMap[chatId].userId || '',
      step: 0,
      point: '',
      coordinates: '',
      comment: '',
      rating: 0,
      install: false,
      photo: '',
      waitingForResponse: false,
      city: profile.city || '',
      textForChanel: '',
      textForChatId: '',
      takenPoints: profile.takenPoints || [],
      noInstallPoints: profile.noInstallPoints || []
    }
  }

  stop () {
    if (this.bot) {
      this.bot.stop()
    }
  }
}